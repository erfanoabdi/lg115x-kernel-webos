/*
	SIC LABORATORY, LG ELECTRONICS INC., SEOUL, KOREA
	Copyright(c) 2013 by LG Electronics Inc.

	This program is free software; you can redistribute it and/or 
	modify it under the terms of the GNU General Public License
	version 2 as published by the Free Software Foundation.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of 
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU General Public License for more details.
*/ 



/** @file
 *
 *  AAD(Analog Audio Decoder) register details. ( used only within kdriver )
 *
 *  author     JongSang Oh(jongsang.oh@lge.com)
 *  revisor    Suyeon Jeong(suyeon.jeong@lge.com)
 *  version    1.0 => 2.0 => 3.0 => 3.1 (L8-A0/A1 => B0 => H13 A0 => MH14 A0)
 *  date       2010.05.28 => 2010.12.07 => 2012.07.02 => 2013.08.30
 */

#ifndef _AAD_REG_H_
#define _AAD_REG_H_

/*----------------------------------------------------------------------------------------
    Control Constants
----------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------
    File Inclusions
----------------------------------------------------------------------------------------*/


#ifdef __cplusplus
extern "C" {
#endif

/*-----------------------------------------------------------------------------
	0x0000 system_select ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	syssel                          : 4,	//  0: 3
	asden                           : 1;	//     4
} SYSTEM_SELECT;

/*-----------------------------------------------------------------------------
	0x0004 standard_select ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	stndrd                          : 3;	//  0: 2
} STANDARD_SELECT;

/*-----------------------------------------------------------------------------
	0x0008 sample_rate ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	samprt                          : 3;	//  0: 2
} SAMPLE_RATE;

/*-----------------------------------------------------------------------------
	0x000c fm_am_demod_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	dmd1dv                          : 2,	//  0: 1
	dmd1md                          : 1,	//     2
	dmd1fl                          : 2,	//  3: 4
	dmd1dv2                         : 1,	//     5
	dmd1fl2                         : 1;	//     6
} FM_AM_DEMOD_CTRL;

/*-----------------------------------------------------------------------------
	0x0010 demod1_car_freq0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	demod1_car_freq0                : 8;	//  0: 7
} DEMOD1_CAR_FREQ0;

/*-----------------------------------------------------------------------------
	0x0014 demod1_car_freq1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	demod1_car_freq1                : 8;	//  0: 7
} DEMOD1_CAR_FREQ1;

/*-----------------------------------------------------------------------------
	0x0018 fm_dqpsk_demod_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	dmd2dv                          : 2,	//  0: 1
	                                : 1,	//     2 reserved
	dmd2fl                          : 2,	//  3: 4
	dmd2dv2                         : 1;	//     5
} FM_DQPSK_DEMOD_CTRL;

/*-----------------------------------------------------------------------------
	0x001c demod2_car_freq0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	dm2fq                           : 8;	//  0: 7
} DEMOD2_CAR_FREQ0;

/*-----------------------------------------------------------------------------
	0x0020 demod2_car_freq1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	dm2fq                           : 8;	//  0: 7
} DEMOD2_CAR_FREQ1;

/*-----------------------------------------------------------------------------
	0x0024 audio_out_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	rtsel                           : 2,	//  0: 1
	ltsel                           : 2,	//  2: 3
	aouten                          : 1,	//     4
	lrsum                           : 1,	//     5
	rol                             : 1,	//     6
	lor                             : 1;	//     7
} AUDIO_OUT_CTRL;

/*-----------------------------------------------------------------------------
	0x0028 audio_mode_detect ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	audmod                          : 2;	//  0: 1
} AUDIO_MODE_DETECT;

/*-----------------------------------------------------------------------------
	0x0030 car1_aver_freq0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1fq                           : 8;	//  0: 7
} CAR1_AVER_FREQ0;

/*-----------------------------------------------------------------------------
	0x0034 car1_aver_freq1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1fq                           : 8;	//  0: 7
} CAR1_AVER_FREQ1;

/*-----------------------------------------------------------------------------
	0x0038 car1_phase_noise0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1pn                           : 8;	//  0: 7
} CAR1_PHASE_NOISE0;

/*-----------------------------------------------------------------------------
	0x003c car1_phase_noise1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1pn                           : 8;	//  0: 7
} CAR1_PHASE_NOISE1;

/*-----------------------------------------------------------------------------
	0x0040 car1_aver_mag0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1mg                           : 8;	//  0: 7
} CAR1_AVER_MAG0;

/*-----------------------------------------------------------------------------
	0x0044 car1_aver_mag1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1mg                           : 8;	//  0: 7
} CAR1_AVER_MAG1;

/*-----------------------------------------------------------------------------
	0x0048 car1_mag_noise0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1mn                           : 8;	//  0: 7
} CAR1_MAG_NOISE0;

/*-----------------------------------------------------------------------------
	0x004c car1_mag_noise1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1mn                           : 8;	//  0: 7
} CAR1_MAG_NOISE1;

/*-----------------------------------------------------------------------------
	0x0050 car1_fm_qual0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1ql                           : 8;	//  0: 7
} CAR1_FM_QUAL0;

/*-----------------------------------------------------------------------------
	0x0054 car1_fm_qual1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr1ql                           : 8;	//  0: 7
} CAR1_FM_QUAL1;

/*-----------------------------------------------------------------------------
	0x0058 car2_aver_mag0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2mg                           : 8;	//  0: 7
} CAR2_AVER_MAG0;

/*-----------------------------------------------------------------------------
	0x005c car2_aver_mag1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2mg                           : 8;	//  0: 7
} CAR2_AVER_MAG1;

/*-----------------------------------------------------------------------------
	0x0060 car2_mag_noise0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2mn                           : 8;	//  0: 7
} CAR2_MAG_NOISE0;

/*-----------------------------------------------------------------------------
	0x0064 car2_mag_noise1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2mn                           : 8;	//  0: 7
} CAR2_MAG_NOISE1;

/*-----------------------------------------------------------------------------
	0x0068 car2_fm_qual0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2ql                           : 8;	//  0: 7
} CAR2_FM_QUAL0;

/*-----------------------------------------------------------------------------
	0x006c car2_fm_qual1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2ql                           : 8;	//  0: 7
} CAR2_FM_QUAL1;

/*-----------------------------------------------------------------------------
	0x0070 pilot_mag ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	pltmag                          : 8;	//  0: 7
} PILOT_MAG;

/*-----------------------------------------------------------------------------
	0x0074 pilot_pll_status ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	plllok                          : 1;	//     0
} PILOT_PLL_STATUS;

/*-----------------------------------------------------------------------------
	0x0078 fm_subcar_mag ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	submag                          : 8;	//  0: 7
} FM_SUBCAR_MAG;

/*-----------------------------------------------------------------------------
	0x007c fm_subcar_noise ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	subns                           : 8;	//  0: 7
} FM_SUBCAR_NOISE;

/*-----------------------------------------------------------------------------
	0x0080 nicam_err0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicerr                          : 8;	//  0: 7
} NICAM_ERR0;

/*-----------------------------------------------------------------------------
	0x0084 nicam_err1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicerr                          : 8;	//  0: 7
} NICAM_ERR1;

/*-----------------------------------------------------------------------------
	0x0088 nicam_ctrl_bits0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicad                           : 8;	//  0: 7
} NICAM_CTRL_BITS0;

/*-----------------------------------------------------------------------------
	0x008c nicam_ctrl_bits1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicctl                          : 5,	//  0: 4
	nicad                           : 3;	//  5: 7
} NICAM_CTRL_BITS1;

/*-----------------------------------------------------------------------------
	0x0090 agc_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	agcdcy                          : 4,	//  0: 3
	agcatk                          : 4;	//  4: 7
} AGC_CTRL;

/*-----------------------------------------------------------------------------
	0x0094 agc_ctrl_for_am ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	amdcy                           : 4,	//  0: 3
	amatk                           : 4;	//  4: 7
} AGC_CTRL_FOR_AM;

/*-----------------------------------------------------------------------------
	0x0098 pilot_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	pilotpaln                       : 1,	//     0
	sapphs                          : 1;	//     1
} PILOT_CTRL;

/*-----------------------------------------------------------------------------
	0x00a8 status ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	prmcardet                       : 1,	//     0
	seccardet                       : 1,	//     1
	sndstat                         : 2,	//  2: 3
	mono_str                        : 1,	//     4
	imono                           : 1,	//     5
	bisap                           : 1,	//     6
	asdcomplete                     : 1;	//     7
} STATUS;

/*-----------------------------------------------------------------------------
	0x00ac status_pin_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	staten                          : 1,	//     0
	statpl                          : 1,	//     1
	astat                           : 1;	//     2
} STATUS_PIN_CTRL;

/*-----------------------------------------------------------------------------
	0x00b0 headroom ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	headrm                          : 3;	//  0: 2
} HEADROOM;

/*-----------------------------------------------------------------------------
	0x00b4 agc_freeze_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	agcfrz                          : 1;	//     0
} AGC_FREEZE_CTRL;

/*-----------------------------------------------------------------------------
	0x00b8 stereo_car_search_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	srchen                          : 2,	//  0: 1
	chgmod                          : 2,	//  2: 3
	                                : 1,	//     4 reserved
	vsphase_y_rnw                   : 3;	//  5: 7
} STEREO_CAR_SEARCH_CTRL;

/*-----------------------------------------------------------------------------
	0x00bc stereo_car_search_result ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	srchrsl                         : 4,	//  0: 3
	srchst                          : 1,	//     4
	srchcmp                         : 1,	//     5
	srchind                         : 1;	//     6
} STEREO_CAR_SEARCH_RESULT;

/*-----------------------------------------------------------------------------
	0x00c0 car2_aver_freq0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2fq                           : 8;	//  0: 7
} CAR2_AVER_FREQ0;

/*-----------------------------------------------------------------------------
	0x00c4 car2_aver_freq1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	cr2fq                           : 8;	//  0: 7
} CAR2_AVER_FREQ1;

/*-----------------------------------------------------------------------------
	0x00c8 stereo_id_mag ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	stmag                           : 8;	//  0: 7
} STEREO_ID_MAG;

/*-----------------------------------------------------------------------------
	0x00cc biling_id_mag ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	bimag                           : 8;	//  0: 7
} BILING_ID_MAG;

/*-----------------------------------------------------------------------------
	0x0100 audio_out_result ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	rtsel                           : 2,	//  0: 1
	ltsel                           : 2,	//  2: 3
	                                : 1,	//     4 reserved
	lrsum                           : 1,	//     5
	rol                             : 1,	//     6
	lor                             : 1;	//     7
} AUDIO_OUT_RESULT;

/*-----------------------------------------------------------------------------
	0x0104 mute_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	mutect                          : 2,	//  0: 1
	muteov                          : 1,	//     2
	mute                            : 2,	//  3: 4
	asdmut                          : 1,	//     5
	aaosmut                         : 1;	//     6
} MUTE_CTRL;

/*-----------------------------------------------------------------------------
	0x0108 i2s_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	i2smode                         : 2,	//  0: 1
	i2s_gain_01                     : 2,	//  2: 3
	lrpol                           : 1,	//     4
	sckpol                          : 1,	//     5
	i2s_gain_2                      : 1;	//     6
} I2S_CTRL;

/*-----------------------------------------------------------------------------
	0x010c interrupt_mask ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	mask_prmcardet                  : 1,	//     0
	mask_seccardet                  : 1,	//     1
	mask_sndstat                    : 2,	//  2: 3
	mask_monostr                    : 1,	//     4
	mask_imono                      : 1,	//     5
	mask_bisap                      : 1,	//     6
	mask_asd                        : 1;	//     7
} INTERRUPT_MASK;

/*-----------------------------------------------------------------------------
	0x0110 manual_agc ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	gain                            : 5,	//  0: 4
	                                : 2,	//  5: 6 reserved
	manualmode                      : 1;	//     7
} MANUAL_AGC;

/*-----------------------------------------------------------------------------
	0x0114 btsc_en_status ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_en                         : 1;	//     0
} BTSC_EN_STATUS;

/*-----------------------------------------------------------------------------
	0x0118 monctrl0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	                                : 3,	//  0: 2 reserved
	monctrl0                        : 1;	//     3
} MONCTRL0;

/*-----------------------------------------------------------------------------
	0x011c monctrl1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	monctrl1                        : 4;	//  0: 3
} MONCTRL1;

/*-----------------------------------------------------------------------------
	0x0120 agc_monitor ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	agc_monitor                     : 5;	//  0: 4
} AGC_MONITOR;

/*-----------------------------------------------------------------------------
	0x0124 detection_time ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	detection_time                  : 8;	//  0: 7
} DETECTION_TIME;

/*-----------------------------------------------------------------------------
	0x0128 car1_qual_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	mn1thh                          : 8;	//  0: 7
} CAR1_QUAL_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x012c car1_qual_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	mn1thl                          : 8;	//  0: 7
} CAR1_QUAL_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0130 car2_qual_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	mn2thh                          : 8;	//  0: 7
} CAR2_QUAL_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x0134 car2_qual_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	mn2thl                          : 8;	//  0: 7
} CAR2_QUAL_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0138 car1_phase_noise_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	pn1thh                          : 8;	//  0: 7
} CAR1_PHASE_NOISE_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x013c car1_phase_noise_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	pn1thl                          : 8;	//  0: 7
} CAR1_PHASE_NOISE_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0140 fm_subcar_mag_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	fmsmth                          : 8;	//  0: 7
} FM_SUBCAR_MAG_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x0144 fm_subcar_mag_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	fmsmtl                          : 8;	//  0: 7
} FM_SUBCAR_MAG_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0148 fm_subcar_noise_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	fmsnth                          : 8;	//  0: 7
} FM_SUBCAR_NOISE_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x014c fm_subcar_noise_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	fmsntl                          : 8;	//  0: 7
} FM_SUBCAR_NOISE_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0150 nicam_err_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nierth                          : 8;	//  0: 7
} NICAM_ERR_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x0154 nicam_err_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	niertl                          : 8;	//  0: 7
} NICAM_ERR_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0158 pilot_mag_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	pilmth                          : 8;	//  0: 7
} PILOT_MAG_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x015c pilot_mag_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	pilmtl                          : 8;	//  0: 7
} PILOT_MAG_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0160 car1_high_qual_aaos_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	q1hthh                          : 8;	//  0: 7
} CAR1_HIGH_QUAL_AAOS_THD_HI;

/*-----------------------------------------------------------------------------
	0x0164 car1_high_qual_aaos_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	q1hthl                          : 8;	//  0: 7
} CAR1_HIGH_QUAL_AAOS_THD_LO;

/*-----------------------------------------------------------------------------
	0x0168 id_mag_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	idthh                           : 8;	//  0: 7
} ID_MAG_THD_HI;

/*-----------------------------------------------------------------------------
	0x016c id_mag_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	idthl                           : 8;	//  0: 7
} ID_MAG_THD_LO;

/*-----------------------------------------------------------------------------
	0x0200 auto_system_detect_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	frfive                          : 3,	//  0: 2
	sxfive                          : 1;	//     3
} AUTO_SYSTEM_DETECT_CTRL;

/*-----------------------------------------------------------------------------
	0x0204 car_mag_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	asmth                           : 8;	//  0: 7
} CAR_MAG_THD;

/*-----------------------------------------------------------------------------
	0x0208 car_aver_freq_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	asfth                           : 8;	//  0: 7
} CAR_AVER_FREQ_THD;

/*-----------------------------------------------------------------------------
	0x020c car_fm_qual_asd_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	asqth                           : 8;	//  0: 7
} CAR_FM_QUAL_ASD_THD;

/*-----------------------------------------------------------------------------
	0x0210 car_am_noise_asd_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	aanth                           : 8;	//  0: 7
} CAR_AM_NOISE_ASD_THD;

/*-----------------------------------------------------------------------------
	0x0214 nicam_noise_asd_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	annth                           : 8;	//  0: 7
} NICAM_NOISE_ASD_THD;

/*-----------------------------------------------------------------------------
	0x0228 nicam_noise0 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicns                           : 8;	//  0: 7
} NICAM_NOISE0;

/*-----------------------------------------------------------------------------
	0x022c nicam_noise1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicns                           : 8;	//  0: 7
} NICAM_NOISE1;

/*-----------------------------------------------------------------------------
	0x0230 asd_car_status ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	carrier1freqgood        : 1,	//     0,
	carrier1maggood   		: 1,	//     1,
	asdcarrier1qualitygood  : 1,	// 	 2,
	asdcarrier1good      	: 1,	//	 3, ASDCarrier1Good = Carrier1MagGood && Carrier1FreqGood && ASDCarrier1QualityGood
	carrier2freqgood        : 1,	//     4
	carrier2maggood         : 1,	//     5
	asdcarrier2qualitygood  : 1,	//     6,
	asdcarrier2good         : 1;	//     7, ASDCarrier2Good = Carrier2MagGood && Carrier2FreqGood && ASDCarrier2QualityGood
} ASD_CAR_STATUS;

/*-----------------------------------------------------------------------------
	0x0234 carrier_fm_quality_scs_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	sqlth                           : 8;	//  0: 7
} CAR_FM_QUAL_SCS_THD;

/*-----------------------------------------------------------------------------
	0x0238 nicam_noise_scs_thd ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	snsth                           : 8;	//  0: 7
} NICAM_NOISE_SCS_THD;

/*-----------------------------------------------------------------------------
	0x023c scs_qual_status ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	scsdqpsk              : 1,	//     0, NICAM, NICAM DK
	scsdqpskqualitygood   : 1,	//     1, (w1SCSDQPSK && w1SCSDQPSKQualityGood) || (w1SCSFM && w1SCSFMQualityGood)
	scsfm                 : 1,	// 	 2, A2, DK1,DK2, DK3
	scsfmqualitygood      : 1,	//	 3, i16Carrier2FMQuality[15:3] >= {5'b0, i8FMQualitySCSThresh}
	car2freqgood          : 1,	//     4
	car2maggood           : 1,	//     5
	scsqualitygood        : 1,	//     6, (w1SCSDQPSK && w1SCSDQPSKQualityGood) || (w1SCSFM && w1SCSFMQualityGood)
	scsgood               : 1;	//     7, w1Carrier2MagGood && w1Carrier2FreqGood && w1SCSQualityGood
} SCS_QUAL_STATUS;

/*-----------------------------------------------------------------------------
	0x0240 auto_volume_correction ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	avcen                           : 1,	//     0
	avcdcy                          : 2,	//  1: 2
	avcatk                          : 2;	//  3: 4
} AUTO_VOL_CORR;

/*-----------------------------------------------------------------------------
	0x0244 lvl_pre_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	prectl0                         : 1;	//     0
} LVL_PRE_CTRL;

/*-----------------------------------------------------------------------------
	0x0248 pre_lvl_left_ch ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	prelft                          : 8;	//  0: 7
} PRE_LVL_LEFT_CH;

/*-----------------------------------------------------------------------------
	0x024c pre_lvl_right_ch ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	prelevrt                        : 8;	//  0: 7
} PRE_LVL_RIGHT_CH;

/*-----------------------------------------------------------------------------
	0x0250 manual_out_lvl_left_ch ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	levlft                          : 8;	//  0: 7
} MANUAL_OUT_LVL_LEFT_CH;

/*-----------------------------------------------------------------------------
	0x0254 manual_out_lvl_right_ch ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	levrt                           : 8;	//  0: 7
} MANUAL_OUT_LVL_RIGHT_CH;

/*-----------------------------------------------------------------------------
	0x0258 avc_lvl_thd_hi ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	avchi                           : 8;	//  0: 7
} AVC_LVL_THD_HI;

/*-----------------------------------------------------------------------------
	0x025c avc_lvl_thd_lo ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	avclo                           : 8;	//  0: 7
} AVC_LVL_THD_LO;

/*-----------------------------------------------------------------------------
	0x0260 nicam_mono_pre_lvl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	niamopr                         : 8;	//  0: 7
} NICAM_MONO_PRE_LVL;

/*-----------------------------------------------------------------------------
	0x0264 nicam_pre_lvl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	nicampr                         : 8;	//  0: 7
} NICAM_PRE_LVL;

/*-----------------------------------------------------------------------------
	0x0268 a2_pre_lvl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	a2pr                            : 8;	//  0: 7
} A2_PRE_LVL;

/*-----------------------------------------------------------------------------
	0x026c legacy_lvls_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	lglen                           : 1;	//     0
} LEGACY_LVLS_CTRL;

/*-----------------------------------------------------------------------------
	0x0280 btsc_diff_spec_ctrl_offset ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_diff_spec_offset           : 8;	//  0: 7
} BTSC_DIFF_SPEC_CTRL_OFFSET;

/*-----------------------------------------------------------------------------
	0x0284 btsc_diff_gain_ctrl_offset ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_diff_gain_offset           : 8;	//  0: 7
} BTSC_DIFF_GAIN_CTRL_OFFSET;

/*-----------------------------------------------------------------------------
	0x0288 btsc_sap_spec_ctrl_offset ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_sap_spec_offset            : 8;	//  0: 7
} BTSC_SAP_SPEC_CTRL_OFFSET;

/*-----------------------------------------------------------------------------
	0x028c btsc_sap_gain_ctrl_offset ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_sap_gain_offset            : 8;	//  0: 7
} BTSC_SAP_GAIN_CTRL_OFFSET;

/*-----------------------------------------------------------------------------
	0x0290 btsc_composite_gain ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_composite_gain             : 8;	//  0: 7
} BTSC_COMPOSITE_GAIN;

/*-----------------------------------------------------------------------------
	0x0294 btsc_sap_gain ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_sap_gain                   : 8;	//  0: 7
} BTSC_SAP_GAIN;

/*-----------------------------------------------------------------------------
	0x0298 btsc_pre_expander_gain ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_pre_exp_gain               : 8;	//  0: 7
} BTSC_PRE_EXPANDER_GAIN;

/*-----------------------------------------------------------------------------
	0x029c btsc_ch1_gain ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_ch1_gain                   : 8;	//  0: 7
} BTSC_CH1_GAIN;

/*-----------------------------------------------------------------------------
	0x02a0 btsc_ch2_gain ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	btsc_ch2_gain                   : 8;	//  0: 7
} BTSC_CH2_GAIN;

/*-----------------------------------------------------------------------------
	0x02a8 sif_drop_interpol_ctrl ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	sfden                           : 1;	//     0
} SIF_DROP_INTERPOL_CTRL;

/*-----------------------------------------------------------------------------
	0x0384 id_pll_param1 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param1                   : 8;	//  0: 7
} ID_PLL_PARAM1;

/*-----------------------------------------------------------------------------
	0x0388 id_pll_param2 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param2                   : 8;	//  0: 7
} ID_PLL_PARAM2;

/*-----------------------------------------------------------------------------
	0x038c id_pll_param3 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param3                   : 8;	//  0: 7
} ID_PLL_PARAM3;

/*-----------------------------------------------------------------------------
	0x0390 id_pll_param4 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param4                   : 8;	//  0: 7
} ID_PLL_PARAM4;

/*-----------------------------------------------------------------------------
	0x0394 id_pll_param5 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param5                   : 8;	//  0: 7
} ID_PLL_PARAM5;

/*-----------------------------------------------------------------------------
	0x0398 id_pll_param6 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param6                   : 8;	//  0: 7
} ID_PLL_PARAM6;

/*-----------------------------------------------------------------------------
	0x039c id_pll_param7 ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param7                   : 8;	//  0: 7
} ID_PLL_PARAM7;

/*-----------------------------------------------------------------------------
	0x03c4 id_pll_param1_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param1_locked            : 8;	//  0: 7
} ID_PLL_PARAM1_LOCKED;

/*-----------------------------------------------------------------------------
	0x03c8 id_pll_param2_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param2_locked            : 8;	//  0: 7
} ID_PLL_PARAM2_LOCKED;

/*-----------------------------------------------------------------------------
	0x03cc id_pll_param3_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param3_locked            : 8;	//  0: 7
} ID_PLL_PARAM3_LOCKED;

/*-----------------------------------------------------------------------------
	0x03d0 id_pll_param4_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param4_locked            : 8;	//  0: 7
} ID_PLL_PARAM4_LOCKED;

/*-----------------------------------------------------------------------------
	0x00d4 id_pll_param5_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param5_locked            : 8;	//  0: 7
} ID_PLL_PARAM5_LOCKED;

/*-----------------------------------------------------------------------------
	0x03d8 id_pll_param6_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param6_locked            : 8;	//  0: 7
} ID_PLL_PARAM6_LOCKED;

/*-----------------------------------------------------------------------------
	0x03dc id_pll_param7_locked ''
------------------------------------------------------------------------------*/
typedef struct {
	UINT32
	id_pll_param7_locked            : 8;	//  0: 7
} ID_PLL_PARAM7_LOCKED;

typedef struct {
	SYSTEM_SELECT                   	system_select                   ;	// 0x0000 : ''
	STANDARD_SELECT                 	standard_select                 ;	// 0x0004 : ''
	SAMPLE_RATE                     	sample_rate                     ;	// 0x0008 : ''
	FM_AM_DEMOD_CTRL                	fm_am_demod_ctrl                ;	// 0x000c : ''
	DEMOD1_CAR_FREQ0                	demod1_car_freq0                ;	// 0x0010 : ''
	DEMOD1_CAR_FREQ1                	demod1_car_freq1                ;	// 0x0014 : ''
	FM_DQPSK_DEMOD_CTRL             	fm_dqpsk_demod_ctrl             ;	// 0x0018 : ''
	DEMOD2_CAR_FREQ0                	demod2_car_freq0                ;	// 0x001c : ''
	DEMOD2_CAR_FREQ1                	demod2_car_freq1                ;	// 0x0020 : ''
	AUDIO_OUT_CTRL                  	audio_out_ctrl                  ;	// 0x0024 : ''
	AUDIO_MODE_DETECT               	audio_mode_detect               ;	// 0x0028 : ''
	UINT32                          	                 __rsvd_00[   1];	// 0x002c
	CAR1_AVER_FREQ0                 	car1_aver_freq0                 ;	// 0x0030 : ''
	CAR1_AVER_FREQ1                 	car1_aver_freq1                 ;	// 0x0034 : ''
	CAR1_PHASE_NOISE0               	car1_phase_noise0               ;	// 0x0038 : ''
	CAR1_PHASE_NOISE1               	car1_phase_noise1               ;	// 0x003c : ''
	CAR1_AVER_MAG0                  	car1_aver_mag0                  ;	// 0x0040 : ''
	CAR1_AVER_MAG1                  	car1_aver_mag1                  ;	// 0x0044 : ''
	CAR1_MAG_NOISE0                 	car1_mag_noise0                 ;	// 0x0048 : ''
	CAR1_MAG_NOISE1                 	car1_mag_noise1                 ;	// 0x004c : ''
	CAR1_FM_QUAL0                   	car1_fm_qual0                   ;	// 0x0050 : ''
	CAR1_FM_QUAL1                   	car1_fm_qual1                   ;	// 0x0054 : ''
	CAR2_AVER_MAG0                  	car2_aver_mag0                  ;	// 0x0058 : ''
	CAR2_AVER_MAG1                  	car2_aver_mag1                  ;	// 0x005c : ''
	CAR2_MAG_NOISE0                 	car2_mag_noise0                 ;	// 0x0060 : ''
	CAR2_MAG_NOISE1                 	car2_mag_noise1                 ;	// 0x0064 : ''
	CAR2_FM_QUAL0                   	car2_fm_qual0                   ;	// 0x0068 : ''
	CAR2_FM_QUAL1                   	car2_fm_qual1                   ;	// 0x006c : ''
	PILOT_MAG                       	pilot_mag                       ;	// 0x0070 : ''
	PILOT_PLL_STATUS                	pilot_pll_status                ;	// 0x0074 : ''
	FM_SUBCAR_MAG                   	fm_subcar_mag                   ;	// 0x0078 : ''
	FM_SUBCAR_NOISE                 	fm_subcar_noise                 ;	// 0x007c : ''
	NICAM_ERR0                      	nicam_err0                      ;	// 0x0080 : ''
	NICAM_ERR1                      	nicam_err1                      ;	// 0x0084 : ''
	NICAM_CTRL_BITS0                	nicam_ctrl_bits0                ;	// 0x0088 : ''
	NICAM_CTRL_BITS1                	nicam_ctrl_bits1                ;	// 0x008c : ''
	AGC_CTRL                        	agc_ctrl                        ;	// 0x0090 : ''
	AGC_CTRL_FOR_AM                 	agc_ctrl_for_am                 ;	// 0x0094 : ''
	PILOT_CTRL                      	pilot_ctrl                      ;	// 0x0098 : ''
	UINT32                          	                 __rsvd_01[   3];	// 0x009c ~ 0x00a4
	STATUS                          	status                          ;	// 0x00a8 : ''
	STATUS_PIN_CTRL                 	status_pin_ctrl                 ;	// 0x00ac : ''
	HEADROOM                        	headroom                        ;	// 0x00b0 : ''
	AGC_FREEZE_CTRL                 	agc_freeze_ctrl                 ;	// 0x00b4 : ''
	STEREO_CAR_SEARCH_CTRL          	stereo_car_search_ctrl          ;	// 0x00b8 : ''
	STEREO_CAR_SEARCH_RESULT        	stereo_car_search_result        ;	// 0x00bc : ''
	CAR2_AVER_FREQ0                 	car2_aver_freq0                 ;	// 0x00c0 : ''
	CAR2_AVER_FREQ1                 	car2_aver_freq1                 ;	// 0x00c4 : ''
	STEREO_ID_MAG                   	stereo_id_mag                   ;	// 0x00c8 : ''
	BILING_ID_MAG                   	biling_id_mag                   ;	// 0x00cc : ''
	UINT32                          	                 __rsvd_02[  12];	// 0x00d0 ~ 0x00fc
	AUDIO_OUT_RESULT                	audio_out_result                ;	// 0x0100 : ''
	MUTE_CTRL                       	mute_ctrl                       ;	// 0x0104 : ''
	I2S_CTRL                        	i2s_ctrl                        ;	// 0x0108 : ''
	INTERRUPT_MASK                  	interrupt_mask                  ;	// 0x010c : ''
	MANUAL_AGC                      	manual_agc                      ;	// 0x0110 : ''
	BTSC_EN_STATUS                  	btsc_en_status                  ;	// 0x0114 : ''
	MONCTRL0                        	monctrl0                        ;	// 0x0118 : ''
	MONCTRL1                        	monctrl1                        ;	// 0x011c : ''
	AGC_MONITOR                     	agc_monitor                     ;	// 0x0120 : ''
	DETECTION_TIME                  	detection_time                  ;	// 0x0124 : ''
	CAR1_QUAL_AAOS_THD_HI           	car1_qual_aaos_thd_hi           ;	// 0x0128 : ''
	CAR1_QUAL_AAOS_THD_LO           	car1_qual_aaos_thd_lo           ;	// 0x012c : ''
	CAR2_QUAL_AAOS_THD_HI           	car2_qual_aaos_thd_hi           ;	// 0x0130 : ''
	CAR2_QUAL_AAOS_THD_LO           	car2_qual_aaos_thd_lo           ;	// 0x0134 : ''
	CAR1_PHASE_NOISE_AAOS_THD_HI    	car1_phase_noise_aaos_thd_hi    ;	// 0x0138 : ''
	CAR1_PHASE_NOISE_AAOS_THD_LO    	car1_phase_noise_aaos_thd_lo    ;	// 0x013c : ''
	FM_SUBCAR_MAG_AAOS_THD_HI       	fm_subcar_mag_aaos_thd_hi       ;	// 0x0140 : ''
	FM_SUBCAR_MAG_AAOS_THD_LO       	fm_subcar_mag_aaos_thd_lo       ;	// 0x0144 : ''
	FM_SUBCAR_NOISE_AAOS_THD_HI     	fm_subcar_noise_aaos_thd_hi     ;	// 0x0148 : ''
	FM_SUBCAR_NOISE_AAOS_THD_LO     	fm_subcar_noise_aaos_thd_lo     ;	// 0x014c : ''
	NICAM_ERR_AAOS_THD_HI           	nicam_err_aaos_thd_hi           ;	// 0x0150 : ''
	NICAM_ERR_AAOS_THD_LO           	nicam_err_aaos_thd_lo           ;	// 0x0154 : ''
	PILOT_MAG_AAOS_THD_HI           	pilot_mag_aaos_thd_hi           ;	// 0x0158 : ''
	PILOT_MAG_AAOS_THD_LO           	pilot_mag_aaos_thd_lo           ;	// 0x015c : ''
	CAR1_HIGH_QUAL_AAOS_THD_HI      	car1_high_qual_aaos_thd_hi      ;	// 0x0160 : ''
	CAR1_HIGH_QUAL_AAOS_THD_LO      	car1_high_qual_aaos_thd_lo      ;	// 0x0164 : ''
	ID_MAG_THD_HI                   	id_mag_thd_hi                   ;	// 0x0168 : ''
	ID_MAG_THD_LO                   	id_mag_thd_lo                   ;	// 0x016c : ''
	UINT32                          	                 __rsvd_03[  36];	// 0x0170 ~ 0x01fc
	AUTO_SYSTEM_DETECT_CTRL         	auto_system_detect_ctrl         ;	// 0x0200 : ''
	CAR_MAG_THD                     	car_mag_thd                     ;	// 0x0204 : ''
	CAR_AVER_FREQ_THD               	car_aver_freq_thd               ;	// 0x0208 : ''
	CAR_FM_QUAL_ASD_THD             	car_fm_qual_asd_thd             ;	// 0x020c : ''
	CAR_AM_NOISE_ASD_THD            	car_am_noise_asd_thd            ;	// 0x0210 : ''
	NICAM_NOISE_ASD_THD             	nicam_noise_asd_thd             ;	// 0x0214 : ''
	UINT32                          	                 __rsvd_04[   4];	// 0x0218 ~ 0x0224
	NICAM_NOISE0                    	nicam_noise0                    ;	// 0x0228 : ''
	NICAM_NOISE1                    	nicam_noise1                    ;	// 0x022c : ''
	ASD_CAR_STATUS                      asd_car_status					;	// 0x0230 : ''
	CAR_FM_QUAL_SCS_THD             	car_fm_qual_scs_thd             ;	// 0x0234 : ''
	NICAM_NOISE_SCS_THD             	nicam_noise_scs_thd             ;	// 0x0238 : ''
	SCS_QUAL_STATUS                     scs_qual_status 	            ;	// 0x023c : ''
	AUTO_VOL_CORR                   	auto_vol_corr                   ;	// 0x0240 : ''
	LVL_PRE_CTRL                    	lvl_pre_ctrl                    ;	// 0x0244 : ''
	PRE_LVL_LEFT_CH                 	pre_lvl_left_ch                 ;	// 0x0248 : ''
	PRE_LVL_RIGHT_CH                	pre_lvl_right_ch                ;	// 0x024c : ''
	MANUAL_OUT_LVL_LEFT_CH          	manual_out_lvl_left_ch          ;	// 0x0250 : ''
	MANUAL_OUT_LVL_RIGHT_CH         	manual_out_lvl_right_ch         ;	// 0x0254 : ''
	AVC_LVL_THD_HI                  	avc_lvl_thd_hi                  ;	// 0x0258 : ''
	AVC_LVL_THD_LO                  	avc_lvl_thd_lo                  ;	// 0x025c : ''
	NICAM_MONO_PRE_LVL              	nicam_mono_pre_lvl              ;	// 0x0260 : ''
	NICAM_PRE_LVL                   	nicam_pre_lvl                   ;	// 0x0264 : ''
	A2_PRE_LVL                      	a2_pre_lvl                      ;	// 0x0268 : ''
	LEGACY_LVLS_CTRL                	legacy_lvls_ctrl                ;	// 0x026c : ''
	UINT32                          	                 __rsvd_05[   4];	// 0x0270 ~ 0x027c
	BTSC_DIFF_SPEC_CTRL_OFFSET      	btsc_diff_spec_ctrl_offset      ;	// 0x0280 : ''
	BTSC_DIFF_GAIN_CTRL_OFFSET      	btsc_diff_gain_ctrl_offset      ;	// 0x0284 : ''
	BTSC_SAP_SPEC_CTRL_OFFSET       	btsc_sap_spec_ctrl_offset       ;	// 0x0288 : ''
	BTSC_SAP_GAIN_CTRL_OFFSET       	btsc_sap_gain_ctrl_offset       ;	// 0x028c : ''
	BTSC_COMPOSITE_GAIN             	btsc_composite_gain             ;	// 0x0290 : ''
	BTSC_SAP_GAIN                   	btsc_sap_gain                   ;	// 0x0294 : ''
	BTSC_PRE_EXPANDER_GAIN          	btsc_pre_expander_gain          ;	// 0x0298 : ''
	BTSC_CH1_GAIN                   	btsc_ch1_gain                   ;	// 0x029c : ''
	BTSC_CH2_GAIN                   	btsc_ch2_gain                   ;	// 0x02a0 : ''
	UINT32                          	                 __rsvd_06[   1];	// 0x02a4
	SIF_DROP_INTERPOL_CTRL          	sif_drop_interpol_ctrl          ;	// 0x02a8 : ''
	UINT32                          	                 __rsvd_07[  54];	// 0x02ac ~ 0x0380
	ID_PLL_PARAM1                   	id_pll_param1                   ;	// 0x0384 : ''
	ID_PLL_PARAM2                   	id_pll_param2                   ;	// 0x0388 : ''
	ID_PLL_PARAM3                   	id_pll_param3                   ;	// 0x038c : ''
	ID_PLL_PARAM4                   	id_pll_param4                   ;	// 0x0390 : ''
	ID_PLL_PARAM5                   	id_pll_param5                   ;	// 0x0394 : ''
	ID_PLL_PARAM6                   	id_pll_param6                   ;	// 0x0398 : ''
	ID_PLL_PARAM7                   	id_pll_param7                   ;	// 0x039c : ''
	UINT32                          	                 __rsvd_08[   9];	// 0x03a0 ~ 0x03c0
	ID_PLL_PARAM1_LOCKED            	id_pll_param1_locked            ;	// 0x03c4 : ''
	ID_PLL_PARAM2_LOCKED            	id_pll_param2_locked            ;	// 0x03c8 : ''
	ID_PLL_PARAM3_LOCKED            	id_pll_param3_locked            ;	// 0x03cc : ''
	ID_PLL_PARAM4_LOCKED            	id_pll_param4_locked            ;	// 0x03d0 : ''
	ID_PLL_PARAM5_LOCKED            	id_pll_param5_locked            ;	// 0x00d4 : ''
	ID_PLL_PARAM6_LOCKED            	id_pll_param6_locked            ;	// 0x03d8 : ''
	ID_PLL_PARAM7_LOCKED            	id_pll_param7_locked            ;	// 0x03dc : ''
} AAD_REG_T;
/* 122 regs, 122 types */

/* 122 regs, 122 types in Total*/

/*
 * @{
 * Naming for register pointer.
 * gpRealRegAAD : real register of AAD.
 * gpRegAAD     : shadow register.
 *
 * @def AAD_RdFL: Read  FLushing : Shadow <- Real.
 * @def AAD_WrFL: Write FLushing : Shadow -> Real.
 * @def AAD_Rd  : Read  whole register(UINT32) from Shadow register.
 * @def AAD_Wr  : Write whole register(UINT32) from Shadow register.
 * @def AAD_Rd01 ~ AAD_Rdnn: Read  given '01~nn' fields from Shadow register.
 * @def AAD_Wr01 ~ AAD_Wrnn: Write given '01~nn' fields to   Shadow register.
 * */
#define AAD_RdFL(_r)			((gpRegAAD->_r)=(gpRealRegAAD->_r))
#define AAD_WrFL(_r)			((gpRealRegAAD->_r)=(gpRegAAD->_r))

#define AAD_Rd(_r)			*((UINT32*)(&(gpRegAAD->_r)))
#define AAD_Wr(_r,_v)			((AAD_Rd(_r))=((UINT32)(_v)))

#define AAD_Rd01(_r,_f01,_v01)													\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
								} while(0)

#define AAD_Rd02(_r,_f01,_v01,_f02,_v02)										\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
								} while(0)

#define AAD_Rd03(_r,_f01,_v01,_f02,_v02,_f03,_v03)								\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
								} while(0)

#define AAD_Rd04(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04)					\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
								} while(0)

#define AAD_Rd05(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05)													\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
								} while(0)

#define AAD_Rd06(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06)										\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
								} while(0)

#define AAD_Rd07(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07)								\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
								} while(0)

#define AAD_Rd08(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08)					\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
								} while(0)

#define AAD_Rd09(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09)													\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
								} while(0)

#define AAD_Rd10(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10)										\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
								} while(0)

#define AAD_Rd11(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11)								\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
									(_v11) = (gpRegAAD->_r._f11);				\
								} while(0)

#define AAD_Rd12(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12)					\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
									(_v11) = (gpRegAAD->_r._f11);				\
									(_v12) = (gpRegAAD->_r._f12);				\
								} while(0)

#define AAD_Rd13(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13)													\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
									(_v11) = (gpRegAAD->_r._f11);				\
									(_v12) = (gpRegAAD->_r._f12);				\
									(_v13) = (gpRegAAD->_r._f13);				\
								} while(0)

#define AAD_Rd14(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14)										\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
									(_v11) = (gpRegAAD->_r._f11);				\
									(_v12) = (gpRegAAD->_r._f12);				\
									(_v13) = (gpRegAAD->_r._f13);				\
									(_v14) = (gpRegAAD->_r._f14);				\
								} while(0)

#define AAD_Rd15(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15)								\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
									(_v11) = (gpRegAAD->_r._f11);				\
									(_v12) = (gpRegAAD->_r._f12);				\
									(_v13) = (gpRegAAD->_r._f13);				\
									(_v14) = (gpRegAAD->_r._f14);				\
									(_v15) = (gpRegAAD->_r._f15);				\
								} while(0)

#define AAD_Rd16(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15,_f16,_v16)					\
								do { 											\
									(_v01) = (gpRegAAD->_r._f01);				\
									(_v02) = (gpRegAAD->_r._f02);				\
									(_v03) = (gpRegAAD->_r._f03);				\
									(_v04) = (gpRegAAD->_r._f04);				\
									(_v05) = (gpRegAAD->_r._f05);				\
									(_v06) = (gpRegAAD->_r._f06);				\
									(_v07) = (gpRegAAD->_r._f07);				\
									(_v08) = (gpRegAAD->_r._f08);				\
									(_v09) = (gpRegAAD->_r._f09);				\
									(_v10) = (gpRegAAD->_r._f10);				\
									(_v11) = (gpRegAAD->_r._f11);				\
									(_v12) = (gpRegAAD->_r._f12);				\
									(_v13) = (gpRegAAD->_r._f13);				\
									(_v14) = (gpRegAAD->_r._f14);				\
									(_v15) = (gpRegAAD->_r._f15);				\
									(_v16) = (gpRegAAD->_r._f16);				\
								} while(0)


#define AAD_Wr01(_r,_f01,_v01)													\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
								} while(0)

#define AAD_Wr02(_r,_f01,_v01,_f02,_v02)										\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
								} while(0)

#define AAD_Wr03(_r,_f01,_v01,_f02,_v02,_f03,_v03)								\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
								} while(0)

#define AAD_Wr04(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04)					\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
								} while(0)

#define AAD_Wr05(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05)													\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
								} while(0)

#define AAD_Wr06(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06)										\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
								} while(0)

#define AAD_Wr07(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07)								\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
								} while(0)

#define AAD_Wr08(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08)					\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
								} while(0)

#define AAD_Wr09(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09)													\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
								} while(0)

#define AAD_Wr10(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10)										\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
								} while(0)

#define AAD_Wr11(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11)								\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
									(gpRegAAD->_r._f11) = (_v11);				\
								} while(0)

#define AAD_Wr12(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12)					\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
									(gpRegAAD->_r._f11) = (_v11);				\
									(gpRegAAD->_r._f12) = (_v12);				\
								} while(0)

#define AAD_Wr13(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13)													\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
									(gpRegAAD->_r._f11) = (_v11);				\
									(gpRegAAD->_r._f12) = (_v12);				\
									(gpRegAAD->_r._f13) = (_v13);				\
								} while(0)

#define AAD_Wr14(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14)										\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
									(gpRegAAD->_r._f11) = (_v11);				\
									(gpRegAAD->_r._f12) = (_v12);				\
									(gpRegAAD->_r._f13) = (_v13);				\
									(gpRegAAD->_r._f14) = (_v14);				\
								} while(0)

#define AAD_Wr15(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15)								\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
									(gpRegAAD->_r._f11) = (_v11);				\
									(gpRegAAD->_r._f12) = (_v12);				\
									(gpRegAAD->_r._f13) = (_v13);				\
									(gpRegAAD->_r._f14) = (_v14);				\
									(gpRegAAD->_r._f15) = (_v15);				\
								} while(0)

#define AAD_Wr16(_r,_f01,_v01,_f02,_v02,_f03,_v03,_f04,_v04,					\
					_f05,_v05,_f06,_v06,_f07,_v07,_f08,_v08,					\
					_f09,_v09,_f10,_v10,_f11,_v11,_f12,_v12,					\
					_f13,_v13,_f14,_v14,_f15,_v15,_f16,_v16)					\
								do { 											\
									(gpRegAAD->_r._f01) = (_v01);				\
									(gpRegAAD->_r._f02) = (_v02);				\
									(gpRegAAD->_r._f03) = (_v03);				\
									(gpRegAAD->_r._f04) = (_v04);				\
									(gpRegAAD->_r._f05) = (_v05);				\
									(gpRegAAD->_r._f06) = (_v06);				\
									(gpRegAAD->_r._f07) = (_v07);				\
									(gpRegAAD->_r._f08) = (_v08);				\
									(gpRegAAD->_r._f09) = (_v09);				\
									(gpRegAAD->_r._f10) = (_v10);				\
									(gpRegAAD->_r._f11) = (_v11);				\
									(gpRegAAD->_r._f12) = (_v12);				\
									(gpRegAAD->_r._f13) = (_v13);				\
									(gpRegAAD->_r._f14) = (_v14);				\
									(gpRegAAD->_r._f15) = (_v15);				\
									(gpRegAAD->_r._f16) = (_v16);				\
								} while(0)

/* Indexed Register Access.
 *
 * There is in-direct field specified by 'index' field within a register.
 * Normally a register has only one meaning for a 'field_name', but indexed register
 * can hold several data for a 'field_name' specifed by 'index' field of indexed register.
 * When writing an 3rd data for given 'field_name' register, you need to set 'rw' = 0, 'index' = 2,
 * and 'load' = 0.
 *
 * ASSUMPTION
 * For Writing indexed register load bit
 *
 * parameter list
 * _r     : name of register
 * _lname : name of load  bit field	: shall be 0 after macro executed.
 * _rwname: name of rw    bit field : shall be 0 after AAD_Wind(), 1 for AAD_Rind()
 * _iname : name of index bit field
 * _ival  : index value
 * _fname : field name
 * _fval  : field variable that field value shall be stored.
 *
 * AAD_Rind : General indexed register Read.(
 * AAD_Wind : General indexed register Read.
 *
 * AAD_Ridx : For 'index', 'rw', 'load' field name
 * AAD_Widx : For 'index', 'rw', 'load' field name and NO_LOAD.
 */
#define AAD_Rind(_r, _lname, _rwname, _iname, _ival, _fname, _fval)				\
							do {												\
								AAD_Wr03(_r,_lname,0,_rwname,1,_iname,_ival);	\
								AAD_WrFL(_r);									\
								AAD_RdFL(_r);									\
								AAD_Rd01(_r,_fname,_fval);						\
							} while (0)

#define AAD_Wind(_r, _lname, _rwname, _iname, _ival, _fname, _fval)				\
				AAD_Wr04(_r, _lname,0, _rwname,0, _iname,_ival, _fname,_fval)


#define AAD_Ridx(_r, _ival, _fname, _fval)	AAD_Rind(_r,load,rw,index,_ival,_fname,_fval)

#define AAD_Widx(_r, _ival, _fname, _fval)	AAD_Wind(_r,load,rw,index,_ival,_fname,_fval)

/** @} *//* end of macro documentation */

#ifdef __cplusplus
}
#endif

#endif	/* _AAD_REG_H_ */

/* from 'LG1152-AAD-MAN-ver0.91.csv' 20130830 04:13:11   KOR by getregs v2.7 */
